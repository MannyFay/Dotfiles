" ~/ideavimrc



"-----------------------------------------------------------------------------
"   Auto Commands
"-----------------------------------------------------------------------------

" Automatically source .ideavimrc on safe:
augroup autosourcing
    autocmd!
    autocmd BufWritePost .ideavimrc source %
augroup END

" Remember last cursor position in a file:
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Wrap text in Markdown and text files:
autocmd BufRead,BufNewFile *.md,*.txt setlocal wrap



"-----------------------------------------------------------------------------
"   Appearance
"-----------------------------------------------------------------------------

" Strictly follow Vim keybindings and commands if conflicting with IntelliJ:
set ideastrictmode
" Use the OS clipboard:
set clipboard+=unnamed,unnamedplus
set clipboard+=ideaput
" Open new horizontal split below the actual:
set splitbelow
" Open new vertical split to the right of the actual:
set splitright
" Turn off all errorbells:
set noerrorbells
set belloff=all
" Turn on visual bell if an error occurs:
set visualbell
" Activate Vim join command consistend with IntelliJ:
set ideajoin
" Show the matching character (like at braces):
set showmatch
" Highlight all search results:
set hlsearch "...must be disabled for easymotion because of marking.
" Search while typing:
set incsearch
" Set default on case insensitive search:
set ignorecase
" Change to case sensitive search if capital letters are used:
set smartcase
" Set number of previous used commands (high numbers can consume more memory):
set history=1000
" Interpred normal mode mappings always on US keyboard layout:
:set keep-english-in-normal
" Enable full power of IntelliJ refactoring capabilities:
set idearefactormode=visual
" Display line numbers:
set number
" Start vertical scrolling by number of visible lines:
set scrolloff=3
" Start horizontal scrolling by number of visible columns:
set sidescrolloff=3
" Show command line if typing Vim commands:
set showcmd
" Show Vim mode in status bar:
set showmode
" Set maximum number of changes that can be undone:
set undolevels=1000
" Set time Vim waits to complete a whole key mapping sequence in milliseconds:
set timeout=1000
" Set time Vim waits for single key strokes in key mappings in milliseconds:
set timeoutlen=1000
" Use Vim in dialogs too:
set ideavimsupport=dialog
" Safe all buffers by executing ':w':
set ideawrite=all
" Set IdeaVim status icon to gray:
set ideastatusicon=gray
" Consider string-string as whole word:
iskeyword:append -


"-----------------------------------------------------------------------
" Default Key Mappings
"-----------------------------------------------------------------------

" Set leader key from / to space:
let mapleader = ' '

" When text is wrapped, move by terminal rows, not lines, unless a count is
" provided:
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'

" Redo last action (U):
nmap U <C-r>

" Disable typically command line typo:
nnoremap q: :q<CR>

" Stay in visual mode after indenting with <:
vmap < <gv

" Stay in visual mode after indenting with >:
vmap > >gv

" Maintain the cursor position  when yanking a visual selection:
vnoremap y myy`y
vnoremap Y myY`y

" Paste/replace visual selection without copying it:
vnoremap p "_dP

" If deleting one char, don't copy it to the clipboard:
nnoremap x "_x

" Insert a ; at the end of a line:
nnoremap ;; <Esc>A;<Esc>
" Insert a , at the end of a line:
nnoremap ,, <Esc>A,<Esc>
" Insert a : at the end of a line:
nnoremap :: <Esc>A:<Esc>

" Move text up and down:
xnoremap <Tab> :move '>+1<CR>gv-gv<CR>
xnoremap <S-Tab> :move '<-2<CR>gv-gv<CR>
vnoremap <Tab> :move '>+1<CR>gv=gv<CR>
vnoremap <S-Tab> :move '<-2<CR>gv=gv<CR>

" Enter visual block mode (vb):
nmap vb <C-v>

" Join line below with withe space:
nnoremap <Leader>jl J

" Comment/uncomment lines:
nnoremap <Leader>/ :action CommentByLineComment <CR>
vnoremap <Leader>/ :action CommentByLineComment <CR>



"-------------------------------------------------------------
"-- Extract Code

" Intodruce variable ( iv):
nnoremap <leader>iv :action IntroduceVariable <CR>
" Introduce constant ( ic):
nnoremap <leader>ic :action IntroduceConstant <CR>
" Extract method ( em):
nnoremap <leader>em :action ExtractMethod  <Cr>
vnoremap <leader>em :action ExtractMethod  <Cr>


"-------------------------------------------------------------
"-- File Formatting

" Reformat code ( rc):
nnoremap <Leader>rc :action ReformatCode <CR>
vnoremap <Leader>rc :action ReformatCode <CR>
" Optimize imports ( oi):
nnoremap <Leader>oi :action OptimizeImports <CR>
vnoremap <Leader>oi :action OptimizeImports <CR>


"-------------------------------------------------------------
"-- Searching

" Quit highlighting of search ( qh):
nmap <Leader>qh :nohl<CR>
" Find files ( ff):
nmap <Leader>ff :action SearchEverywhere<CR>
" Find text inside files ( ft):
nmap <Leader>ft :action FindInPath<CR>
vmap <leader>ft :action FindInPath<CR>
" Show recent files ( rf):
nnoremap <Leader>rf :action RecentFiles <CR>
" Find usages ( fu):
nnoremap <Leader>fu :action FindUsages <CR>
vnoremap <Leader>fu :action FindUsages <CR>
" Go to declaration (gd):
nnoremap gd :action GotoDeclaration <CR>


"-------------------------------------------------------------
"-- Scrolling

" Scroll actual line to top (T):
nmap T zt
" Scroll actual line to bottom (B):
nmap B zb
" Scroll actual line to center (C):
nmap C zz
" Scroll up (ctrlk):
nmap <C-k> <C-u>
" Scroll down (ctrlj):
nmap <C-j> <C-e>
" Scroll page up (ctrlpu):
nmap <C-p-u> <C-b>
" Scroll page down (ctrlpd):
nmap <C-p-d> <C-f>


"-------------------------------------------------------------
"-- Splits (Buffer)

" Split buffer vertically ( v):
nmap <Leader>| :action SplitVertically <CR>
" Split buffer horizontally ( h):
nmap <Leader>- <C-w>s
" Go to right split (L):
nmap L <C-w>l
" Go to left split (H):
nmap H <C-w>h
" Go to split below (J):
nmap J <C-w>j
" Go to split above (K):
nmap K <C-w>k
" Equalize width and height for all splits ( es):
"nmap <Leader>es <C-w>=
" Grow split vertical ( gv):
"nmap <Leader>gv :vertical resize +5<CR>
" Shrink split vertical ( sv):
"nmap <Leader>sv :vertical resize +5<CR>
" Grow split horizontally ( gh):
nmap <Leader>gh :resize +5
" Shrink split horizontally ( sh):
nmap <Leader>sh :resize -5

" Open terminal horizontally ( th):
noremap <Leader>th :action ActivateTerminalToolWindow<CR>

" To tab to the right: ( tr):
noremap <Leader>tr :action NextTab

" To tab to the right: ( tl):
noremap <Leader>tl :action PreviousTab

" Quit active tab ( qt):
noremap <Leader>qt :action CloseActiveTab


"-----------------------------------------------------------------------
"   NERDTree Plugin
"-----------------------------------------------------------------------

"https://github.com/JetBrains/ideavim/wiki/NERDTree-support

" Install plugin:
set NERDTree

"-------------------
" Commands
"+-----+-------------------------------+-----+-------------------------------+
"|  j  |  down                         |  k  |  up                           |
"+-----+-------------------------------+-----+-------------------------------+
"|  q  |  close project pane           |  P  |  jump to root node            |
"+-----+-------------------------------+-----+-------------------------------+
"|  o  |  open/close file/dir          |  go |  open/close but stay in tree  |
"+-----+-------------------------------+-----+-------------------------------+
"|  s  |  open in new vertical split   |  ⌘r |  rename                       |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌘d |  delete file/dir              |  ⌘n |  new file/dir                 |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌘c |  copy file/dir                |  ⌘x |  cut file/dir                |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌘v |  paste file/dir               |  ⌥n |  copy file/dir name           |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌥p |  copy path from content root  |     |                               |
"+-----+-------------------------------+-----+-------------------------------+

" Toggle tree ( tt):
nnoremap <Leader>tt :NERDTreeToggle<CR>

" Explore tree ( et):
nnoremap <Leader>et :NERDTreeFocus<CR>

" Show actual file in tree ( sft):
nnoremap <Leader>sft :NERDTreeFind<CR>

" Open file in new, vertical split (|):
let g:NERDTreeMapOpenVSplit='|'

" Open file in new, horizontal split (-):
let g:NERDTreeMapOpenSplit='-'

" Close node (qn):
let g:NERDTreeMapCloseDir='qn'

" Jump to parent node (P)
let g:NERDTreeMapJumpParent='P'



" Refresh tree ( rt):
nnoremap <Leader>rt :NERDTreeRefreshRoot

"These commands doesn't work:
" Open file in actual buffer (enter):
"nnoremap <CR> :NERDTreeMapActivateNode
" Open file in new vertical split (v):
"nnoremap v :NERDTreeMapOpenVSplit<CR>
" Open file in new horizontal split (h):
"nnoremap h :NERDTreeMapOpenSplit<CR>

" Collapse tree ( ct):
" Collapse tree, keep paths to buffers ( cb):

let NERDTreeMinimalUI=1

" Show folding arrows:
let NERDTreeDirArrows=1

" Initial tree width:
let g:NERDTreeWinSize=46

" Show hidden files by default:
let NERDTreeShowHidden=1

" Start NERDTree if Vim starts.
autocmd VimEnter * NERDTree | wincmd p




"-----------------------------------------------------------------------------
"   Easy Motion Plugin (install Ace Jump plugin in IDE!)
"-----------------------------------------------------------------------------

" https://github.com/easymotion/vim-easymotion

" Install plugin:
set easymotion


"-------------------------------------------------------------
"-- Key Mappings

" The following mappings do not work properly!:

" Hop to character in (multiple) buffer ( c):
nmap <Leader>c <Plug>(easymotion-s)
map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

" Hop to word in (multiple) buffer ( w):
" nmap <Leader>w <Plug>(easymotion-bd-w)
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Hop to pattern in (multiple) buffer ( p):
nmap <Leader>p <Plug>(easymotion-jumptoanywhere)


" Hop to a line start in (multiple) buffer ( l):
nmap <Leader>l <Plug>(easymotion-bd-jk)
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)



"-----------------------------------------------------------------------------
"   Vim Surround Plugin
"-----------------------------------------------------------------------------

"https://github.com/tpope/vim-surround

" Install plugin:
set surround


"-------------------------------------------------------------
"-- Key Mappings

" Surround word with ():
nnoremap (( ysiw)
" Surround word with {}:
nnoremap {{ ysiw}
" Surround word with []:
nnoremap [[ ysiw]
" Surround word with "":
nnoremap "" ysiw"
" Surround word with '':
nnoremap '' ysiw'
" Surround word with ``:
nnoremap `` ysiw`
" Surround word with <>:
nnoremap <> ysiw>

" Surround marked with ():
vnoremap (( S)
" Surround marked with {}:
vnoremap {{ S}
" Surround marked with []:
vnoremap [[ S]
" Surround marked with "":
vnoremap "" S"
" Surround marked with '':
vnoremap '' S'
" Surround marked with ``:
vnoremap `` S`
" Surround marked with <>:
vnoremap <> S>

" Surround with tag:
nnoremap swt ySSt
" Surround marked with tag:
vnoremap swt St


"-----------------------------------------------------------------------------
"   Vim Commentary Plugin
"-----------------------------------------------------------------------------

" https://github.com/tpope/vim-commentary/tree/master

" Install plugin:
set commentary

"-------------------------------------------------------------
"-- Key Mappings

" Comment in/out selection ( /s)
vmap <Leader>/s gc



"-----------------------------------------------------------------------------
"   some actions
"-----------------------------------------------------------------------------

" Open terminal in vertical split:
nnoremap <Leader>th :action ActivateTerminalToolWindow <CR>







